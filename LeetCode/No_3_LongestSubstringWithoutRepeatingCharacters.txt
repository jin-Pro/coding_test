주어진 s에서
0번째 인덱스부터 쭉 훑어봐서 자기와 같은 값을 갖은 인덱스를 찾는다.
없다면 1번쨰 인덱스부터 ~~

찾으면 break;
i값과 찾은 index값(j)를 챙긴다.

0번째 인덱스부터 j-1까지 뽑아서 검사한다.
i+1번부터 j-1까지 확인한다.
i+1번이 null이면 return s.length;

j부터 끝까지 반복한다.
j+1번이 null이면 return s.length;


int num1 과 num2 로 s.length값을 받아서

더큰 값을 return해준다.

----------------------------------------------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------------------------------------------------

public int lengthOfLongestSubstring(String s) {
		if(s.length() == 1) {
			return 1;
		}
        int firstNum ;
        int secondNum ;
        
        String[] sSplit = s.split("");
        for(int i = 0; i < s.length()-1; i++) {
        	for(int j = i+1; j < s.length(); j++) {
        		if(sSplit[i].compareTo(sSplit[j]) == 0) {
        			firstNum = lengthOfLongestSubstring(s.substring(0,j));
        			secondNum = lengthOfLongestSubstring(s.substring(j));
        			return (firstNum > secondNum) ? firstNum : secondNum;
        		}
        	}
        }
        
        return s.length();
    }

----------------------------------------------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------------------------------------------------

wrong Answer ==>> "dvdf"

위에 내가 푼 방법대로 하면 2가 나오지만 사실 정답은 vdf => 3이나와야한다.


dvdf는 lengthOfLongestSubstring(s.subString(0,i+1))로 잘라주면 된다.

----------------------------------------------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------------------------------------------------

따라서 내가 생각한 방법은

lengthOfLongestSubstring를 firstWay와 secondWay 함수 두개로 나눈다.
이 두 함수의 차이점은 
firstWay : firstNum = lengthOfLongestSubstring(s.substring(0,j));
           secondNum = lengthOfLongestSubstring(s.substring(j));

secondWay : firstNum = lengthOfLongestSubstring(s.substring(0,i+1));
            secondNum = lengthOfLongestSubstring(s.substring(i+1));

어디서 문자열을 자르냐 차이다.
문자열을 자를때마다 firstWay와 secondWay로 나누기때문에 공통된 문자가 나타날때마다 2^n으로 함수 호출이 늘어난다.
따라서 답은 맞지만 시간초과 발생


----------------------------------------------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------------------------------------------------


내가 내린 결론은 이거 두개 방법을 섞거나 이중 for문을 수정해봐야할것같음

이중 for문을 단일 for문으로 수정하고 
indexOf를 사용하였다.
        
firstWay : 

        for(int i = 0; i < s.length()-1; i++) {
        	int catchIndex = s.indexOf(sSplit[i],i+1);
        	if(catchIndex != -1) {
        		firstNum = lengthOfLongestSubstring(s.substring(0,catchIndex));
    			secondNum = lengthOfLongestSubstring(s.substring(catchIndex));
    			return (firstNum > secondNum) ? firstNum : secondNum;
        	}
        }
        
secondWay : 

        for(int i = 0; i < s.length()-1; i++) {
        	int catchIndex = s.indexOf(sSplit[i],i+1);
        	if(catchIndex != -1) {
    			firstNum = lengthOfLongestSubstring(s.substring(0,i+1));
    			secondNum = lengthOfLongestSubstring(s.substring(i+1));
    			return (firstNum > secondNum) ? firstNum : secondNum;
        	}
        }

이중 for문은 
456 / 987 test cases passed.

단일 for문은

457 / 987 test cases passed. 

이중 for문을 단일 for문으로 바꿨으나 통과한 테스트케이스는 1개뿐

----------------------------------------------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------------------------------------------------

그럼 여기서 두가지 방법을 섞거나 새로 문제를 다시 풀어야한다.

두가지 방법을 섞는 조건이 떠오르질 않아서 새로 문제를 풀기로 한다.

글자s를 받고 글자s의 char를 하나씩 조사하면서 subString을 만들어 나간다.
그때 최고의 길이를 출력하면 된다.

여기서 요점은 subString의 최고 길이이다.
따라서 subString을 만드는게 관건이라 생각된다.


----------------------------------------------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------------------------------------------------

예를들어, string이 주어지면 subString이 시작하는 begin과 끝나는 end지점을 string의 첫 인덱스에 배치하고 

string의 index를 읽어나갈때 begin과 읽어오는 string값이 같다면 begin을 늘려준다. 

max_value는 end-begin의 값이 최대인 경우를 넣어준다. 


최종 코드 ==>>

public static int lengthOfLongestSubstring(String s) {
		int begin = 0;
		int end = 0;
		int max_value = 0;
		ArrayList<String> subString = new ArrayList<String>();
		String[] sSplit = s.split("");
		
		for(int i = 0; i < s.length(); i++) {
			if(subString.contains(sSplit[i])){
				int num = subString.indexOf(sSplit[i]);
				for(int j = 0; j<= num; j++){
					subString.remove(0);
				}
				begin += num + 1;
			}
			subString.add(sSplit[i]);
			end ++;
			max_value = ((end - begin) > max_value) ? (end - begin) : max_value ;
		}
		
		return max_value;
    }

----------------------------------------------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------------------------------------------------

내 코드는

Runtime: 20 ms, faster than 20.10% of Java online submissions for Longest Substring Without Repeating Characters.
Memory Usage: 41.1 MB, less than 20.48% of Java online submissions for Longest Substring Without Repeating Characters.

하지만 구글에서 나와 비슷한 풀이의 코드는

Runtime: 6 ms, faster than 69.83% of Java online submissions for Longest Substring Without Repeating Characters.
Memory Usage: 38.9 MB, less than 83.60% of Java online submissions for Longest Substring Without Repeating Characters.

----------------------------------------------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------------------------------------------------

public int lengthOfLongestSubstring(String s) {
        Set set = new HashSet();
        int n = s.length();
        int begin = 0, end = 0;
        int ans = 0;
 
        while(end < n) {
            if(set.contains(s.charAt(end))) {
                set.remove(s.charAt(begin++));
            } else {
                set.add(s.charAt(end++));
                ans = Math.max(ans, end - begin);
            }
        }
        return ans;
    }

아 end값을 변경안해주면 같은 값을 포함하지 않을떄까지 while반복으로 계속 지우네

나는 그 와중에 for문으로 num값까지 다지웠고
end값을 계속 변경해줬네

----------------------------------------------------------------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
----------------------------------------------------------------------------------

내껏도

public static int lengthOfLongestSubstring(String s) {
		int begin = 0;
		int end = 0;
		int max_value = 0;
        	int num = s.length();

		ArrayList<String> subString = new ArrayList<String>();
		String[] sSplit = s.split("");
		
		while(end < num) {
	        	if(subString.contains(sSplit[end])){
			        subString.remove(0);
			        begin ++;
	       		}else{
		        	subString.add(sSplit[end]);
		        	end ++;
	        	}
	        	max_value = ((end - begin) > max_value) ? (end - begin) : max_value ;
        	}
		
		return max_value;
    }

위와 비슷하게 했더니 오히려 더 안좋아졌다.

Runtime: 36 ms, faster than 17.22% of Java online submissions for Longest Substring Without Repeating Characters.
Memory Usage: 41 MB, less than 21.85% of Java online submissions for Longest Substring Without Repeating Characters.

내 생각엔 set을 사용한것과 ArrayList와 s를 split한것에서 시간차이가 발생한것 같다.

set을 공부해야겠다.